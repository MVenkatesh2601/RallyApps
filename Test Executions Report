<!DOCTYPE html><html>
<head>
    <title>Test Set & User Story Execution Results</title>
    <script type="text/javascript" src="https://rally1.rallydev.com/apps/2.1/sdk.js"></script>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
        }
        .controls {
            margin-bottom: 20px;
        }
        select, button {
            padding: 6px 10px;
            margin-right: 10px;
            font-size: 14px;
        }
        table {
            width: 100%;
            border-collapse: collapse;
        }
        th, td {
            border: 1px solid #ccc;
            padding: 8px;
            text-align: center;
            vertical-align: middle;
        }
        th {
            background-color: #f2f2f2;
        }
        tr:nth-child(even) {
            background-color: #fafafa;
        }
        th:nth-child(3), td:nth-child(3) {
            white-space: normal;
            word-wrap: break-word;
            max-width: 300px;
            text-align: left;
        }
        .progress-bar {
            height: 20px;
            background-color: #e0e0e0;
            border-radius: 5px;
            overflow: hidden;
        }
        .progress-fill {
            height: 100%;
            background-color: #4caf50;
            text-align: center;
            color: white;
            line-height: 20px;
            font-size: 12px;
        }
        .refresh-button {
            background-color: #4caf50;
            color: white;
            border: none;
            cursor: pointer;
            padding: 8px 16px;
            border-radius: 5px;
        }
        .refresh-button:hover {
            background-color: #45a049;
        }
    </style>
</head>
<body>
    <div class="controls">
        <select id="iterationDropdown"></select>
        <select id="typeDropdown">
            <option value="TestSet">Test Sets</option>
            <option value="UserStory">User Stories</option>
            <option value="All">All</option>
        </select>
        <button class="refresh-button" onclick="refreshData()">Refresh</button>
    </div><div id="results"></div>

<script type="text/javascript">
    let selectedIterationRef = null;

    Rally.onReady(function() {
        loadIterations();
    });

    function loadIterations() {
        Ext.create('Rally.data.wsapi.Store', {
            model: 'Iteration',
            fetch: ['Name', 'ObjectID'],
            autoLoad: true,
            listeners: {
                load: function(store, records) {
                    const dropdown = document.getElementById('iterationDropdown');
                    records.forEach(record => {
                        const option = document.createElement('option');
                        option.value = record.get('_ref');
                        option.text = record.get('Name');
                        dropdown.appendChild(option);
                    });
                    selectedIterationRef = dropdown.value;
                    dropdown.addEventListener('change', (e) => {
                        selectedIterationRef = e.target.value;
                    });
                    refreshData();
                }
            }
        });
    }

    async function refreshData() {
        const type = document.getElementById('typeDropdown').value;
        const results = [];
        
        if (type === 'TestSet' || type === 'All') {
            await loadTestSets(results);
        }
        if (type === 'UserStory' || type === 'All') {
            await loadUserStories(results);
        }
        
        renderResults(results);
    }

    async function loadTestSets(results) {
        return new Promise((resolve, reject) => {
            Ext.create('Rally.data.wsapi.Store', {
                model: 'TestSet',
                fetch: ['FormattedID', 'Name', 'ObjectID'],
                filters: [{ property: 'Iteration', operator: '=', value: selectedIterationRef }],
                autoLoad: true,
                listeners: {
                    load: async function(store, records) {
                        for (const record of records) {
                            const testSetData = await loadTestCases(record, 'TestSet');
                            results.push(testSetData);
                        }
                        resolve();
                    }
                }
            });
        });
    }

    async function loadUserStories(results) {
        return new Promise((resolve, reject) => {
            Ext.create('Rally.data.wsapi.Store', {
                model: 'UserStory',
                fetch: ['FormattedID', 'Name', 'ObjectID'],
                filters: [{ property: 'Iteration', operator: '=', value: selectedIterationRef }],
                autoLoad: true,
                listeners: {
                    load: async function(store, records) {
                        for (const record of records) {
                            const userStoryData = await loadTestCases(record, 'UserStory');
                            results.push(userStoryData);
                        }
                        resolve();
                    }
                }
            });
        });
    }

    async function loadTestCases(workItem, type) {
        return new Promise((resolve, reject) => {
            Ext.create('Rally.data.wsapi.Store', {
                model: 'TestCase',
                fetch: ['FormattedID', 'Name', 'LastVerdict'],
                filters: [{ property: 'WorkProduct.ObjectID', operator: '=', value: workItem.get('ObjectID') }],
                autoLoad: true,
                listeners: {
                    load: function(store, records) {
                        let pass = 0, fail = 0, error = 0, blocked = 0, notrun = 0;
                        records.forEach(tc => {
                            const verdict = tc.get('LastVerdict') || 'Not Run';
                            switch (verdict) {
                                case 'Pass': pass++; break;
                                case 'Fail': fail++; break;
                                case 'Error': error++; break;
                                case 'Blocked': blocked++; break;
                                default: notrun++;
                            }
                        });
                        resolve({
                            formattedID: workItem.get('FormattedID'),
                            name: workItem.get('Name'),
                            objectID: workItem.get('ObjectID'),
                            type: type,
                            pass: pass,
                            fail: fail,
                            error: error,
                            blocked: blocked,
                            notrun: notrun,
                            total: records.length
                        });
                    }
                }
            });
        });
    }

    function renderResults(results) {
        let html = '<table>';
        html += '<tr><th>S.No</th><th>ID</th><th>Name</th><th>Execution %</th><th>Pass %</th><th>Not Run</th><th>Pass</th><th>Fail</th><th>Error</th><th>Blocked</th><th>Total</th></tr>';
        let sno = 1, total_pass = 0, total_fail = 0, total_error = 0, total_blocked = 0, total_notrun = 0, total_total = 0;

        results.forEach(item => {
            const executionPercentage = item.total > 0 ? ((item.pass + item.fail + item.error + item.blocked) / item.total * 100).toFixed(1) : 0;
            const passPercentage = item.total > 0 ? (item.pass / item.total * 100).toFixed(1) : 0;
            html += `<tr>
                <td>${sno++}</td>
                <td>${item.formattedID}</td>
                <td>${item.name}</td>
                <td>${createProgressBar(executionPercentage)}</td>
                <td>${createProgressBar(passPercentage)}</td>
                <td>${item.notrun}</td>
                <td>${item.pass}</td>
                <td>${item.fail}</td>
                <td>${item.error}</td>
                <td>${item.blocked}</td>
                <td>${item.total}</td>
            </tr>`;
            total_pass += item.pass;
            total_fail += item.fail;
            total_error += item.error;
            total_blocked += item.blocked;
            total_notrun += item.notrun;
            total_total += item.total;
        });

        html += `<tr style="background-color: #d9edf7; font-weight: bold;">
            <td colspan="5">Total</td>
            <td>${total_notrun}</td>
            <td>${total_pass}</td>
            <td>${total_fail}</td>
            <td>${total_error}</td>
            <td>${total_blocked}</td>
            <td>${total_total}</td>
        </tr>`;
        html += '</table>';

        document.getElementById('results').innerHTML = html;
    }

    function createProgressBar(value) {
        return `<div class="progress-bar"><div class="progress-fill" style="width:${value}%">${value}%</div></div>`;
    }
</script>

</body>
</html>
