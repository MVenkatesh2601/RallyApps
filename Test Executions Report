<!DOCTYPE html>
<html>

<head>
    <title>Rally Execution Report</title>
    <script src="https://rally1.rallydev.com/apps/2.1/sdk.js"></script>
    <style>
        body {
            font-family: 'Segoe UI', sans-serif;
            margin: 20px;
            background: #f7f9fb;
        }

        .controls {
            display: flex;
            align-items: center;
            gap: 10px;
            margin-bottom: 20px;
        }

        select, button {
            padding: 8px 12px;
            border: 1px solid #ccc;
            border-radius: 6px;
            font-size: 14px;
            background: #fff;
            cursor: pointer;
        }

        button {
            background: #0073e6;
            color: #fff;
            border: none;
            display: flex;
            align-items: center;
            gap: 5px;
        }

        button:hover {
            background: #005bb5;
        }

        table {
            width: 100%;
            border-collapse: separate;
            border-spacing: 0 8px;
        }

        th, td {
            background: #fff;
            padding: 12px;
            text-align: center;
            border-bottom: 1px solid #ddd;
        }

        th {
            background: #0073e6;
            color: #fff;
        }

        .progress {
            height: 18px;
            background: #eee;
            border-radius: 10px;
            overflow: hidden;
            margin-top: 4px;
        }

        .progress-bar {
            height: 100%;
            background: #28a745;
        }

        .total-row td {
            font-weight: bold;
            background: #dbe9f7;
        }
    </style>
</head>

<body>

    <div class="controls">
        <select id="iterationDropdown"></select>
        <select id="typeDropdown">
            <option value="all">All</option>
            <option value="testsets">Test Sets</option>
            <option value="userstories">User Stories</option>
        </select>
        <button onclick="loadData()">
            ðŸ”„ Refresh
        </button>
    </div>

    <table id="resultsTable">
        <thead>
            <tr>
                <th>#</th>
                <th>Type</th>
                <th>ID</th>
                <th>Execution %</th>
                <th>Pass %</th>
                <th>Not Run</th>
                <th>Pass</th>
                <th>Fail</th>
                <th>Error</th>
                <th>Blocked</th>
                <th>Total TC</th>
            </tr>
        </thead>
        <tbody></tbody>
    </table>

    <script>
        Rally.onReady(async function () {
            await loadIterations();
            loadData();
        });

        async function loadIterations() {
            const dropdown = document.getElementById('iterationDropdown');
            const iterations = await fetchIterations();
            iterations.forEach(iter => {
                const option = document.createElement('option');
                option.value = iter.id;
                option.textContent = iter.name;
                dropdown.appendChild(option);
            });
        }

        function fetchIterations() {
            return new Promise((resolve, reject) => {
                Ext.create('Rally.data.wsapi.Store', {
                    model: 'Iteration',
                    fetch: ['Name', 'ObjectID'],
                    autoLoad: true,
                    listeners: {
                        load: function (store, records) {
                            const iterations = records.map(record => ({
                                id: record.get('ObjectID'),
                                name: record.get('Name')
                            }));
                            resolve(iterations);
                        }
                    }
                });
            });
        }

        function fetchTestSets(iterationId) {
            return new Promise((resolve, reject) => {
                Ext.create('Rally.data.wsapi.Store', {
                    model: 'TestSet',
                    fetch: ['FormattedID', 'ObjectID'],
                    filters: [{ property: 'Iteration.ObjectID', value: iterationId }],
                    autoLoad: true,
                    listeners: {
                        load: function (store, records) {
                            const testSets = records.map(record => ({
                                id: record.get('FormattedID'),
                                objectId: record.get('ObjectID'),
                                url: `/detail/testset/${record.get('ObjectID')}`,
                                testCases: []
                            }));
                            resolve(testSets);
                        }
                    }
                });
            });
        }

        function fetchUserStories(iterationId) {
            return new Promise((resolve, reject) => {
                Ext.create('Rally.data.wsapi.Store', {
                    model: 'HierarchicalRequirement',
                    fetch: ['FormattedID', 'ObjectID'],
                    filters: [{ property: 'Iteration.ObjectID', value: iterationId }],
                    autoLoad: true,
                    listeners: {
                        load: function (store, records) {
                            const userStories = records.map(record => ({
                                id: record.get('FormattedID'),
                                objectId: record.get('ObjectID'),
                                url: `/detail/userstory/${record.get('ObjectID')}`,
                                testCases: []
                            }));
                            resolve(userStories);
                        }
                    }
                });
            });
        }

        function fetchTestCases(iterationId) {
            return new Promise((resolve, reject) => {
                Ext.create('Rally.data.wsapi.Store', {
                    model: 'TestCase',
                    fetch: ['LastVerdict', 'WorkProduct', 'TestSet', 'ObjectID'],
                    filters: [{ property: 'Iteration.ObjectID', value: iterationId }],
                    autoLoad: true,
                    listeners: {
                        load: function (store, records) {
                            const testCases = records.map(record => ({
                                lastVerdict: record.get('LastVerdict') || 'Not Run',
                                workProductId: record.get('WorkProduct') ? record.get('WorkProduct').ObjectID : null,
                                testSetId: record.get('TestSet') ? record.get('TestSet').ObjectID : null
                            }));
                            resolve(testCases);
                        }
                    }
                });
            });
        }

        async function loadData() {
            const iterationId = document.getElementById('iterationDropdown').value;
            const type = document.getElementById('typeDropdown').value;

            let data = [];
            let testSets = [];
            let userStories = [];

            if (type === 'testsets' || type === 'all') {
                testSets = await fetchTestSets(iterationId);
            }
            if (type === 'userstories' || type === 'all') {
                userStories = await fetchUserStories(iterationId);
            }

            const testCases = await fetchTestCases(iterationId);

            testSets.forEach(ts => {
                ts.testCases = testCases.filter(tc => tc.testSetId === ts.objectId);
                ts.type = 'Test Set';
            });

            userStories.forEach(us => {
                us.testCases = testCases.filter(tc => tc.workProductId === us.objectId);
                us.type = 'User Story';
            });

            data = [...testSets, ...userStories];

            renderTable(data);
        }

        function renderTable(data) {
            const tbody = document.getElementById('resultsTable').querySelector('tbody');
            tbody.innerHTML = '';

            let total = {
                notrun: 0,
                pass: 0,
                fail: 0,
                error: 0,
                blocked: 0,
                total: 0
            };

            data.forEach((item, index) => {
                let counts = {
                    notrun: 0,
                    pass: 0,
                    fail: 0,
                    error: 0,
                    blocked: 0
                };

                item.testCases.forEach(tc => {
                    switch (tc.lastVerdict) {
                        case 'Pass': counts.pass++; break;
                        case 'Fail': counts.fail++; break;
                        case 'Error': counts.error++; break;
                        case 'Blocked': counts.blocked++; break;
                        default: counts.notrun++; break;
                    }
                });

                const totalCount = item.testCases.length;
                const execution = totalCount > 0 ? ((totalCount - counts.notrun) / totalCount) * 100 : 0;
                const passPercentage = totalCount > 0 ? (counts.pass / totalCount) * 100 : 0;

                total.notrun += counts.notrun;
                total.pass += counts.pass;
                total.fail += counts.fail;
                total.error += counts.error;
                total.blocked += counts.blocked;
                total.total += totalCount;

                const row = `
                    <tr>
                        <td>${index + 1}</td>
                        <td>${item.type}</td>
                        <td><a href="${item.url}" target="_blank">${item.id}</a></td>
                        <td>
                            ${execution.toFixed(1)}%
                            <div class="progress"><div class="progress-bar" style="width: ${execution}%"></div></div>
                        </td>
                        <td>
                            ${passPercentage.toFixed(1)}%
                            <div class="progress"><div class="progress-bar" style="width: ${passPercentage}%"></div></div>
                        </td>
                        <td>${counts.notrun}</td>
                        <td>${counts.pass}</td>
                        <td>${counts.fail}</td>
                        <td>${counts.error}</td>
                        <td>${counts.blocked}</td>
                        <td>${totalCount}</td>
                    </tr>
                `;
                tbody.insertAdjacentHTML('beforeend', row);
            });

            // Add totals row
            const totalRow = `
                <tr class="total-row">
                    <td colspan="5">Total</td>
                    <td>${total.notrun}</td>
                    <td>${total.pass}</td>
                    <td>${total.fail}</td>
                    <td>${total.error}</td>
                    <td>${total.blocked}</td>
                    <td>${total.total}</td>
                </tr>
            `;
            tbody.insertAdjacentHTML('beforeend', totalRow);
        }
    </script>

</body>

</html>
